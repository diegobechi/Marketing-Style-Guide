@function text-color($color) {
  @if (lightness($color) > 50) {
    @return $gray-darker;
  } @else {
    @return $white;
  }
}

@mixin text-hide() {
  overflow: hidden;
  text-indent: 100%;
  white-space: nowrap;
}

@mixin clearfix() {
  &:before,
  &:after {
    content: " "; // 1
    display: table; // 2
  }
  &:after {
    clear: both;
  }
}

// Responsive utilities
// More easily include all the states for responsive-utilities.less.
// [converter] $parent hack
// Make item visible
@mixin responsive-visibility($size) {
  #{$size} {
    display: initial !important;
  }
  table#{$size} {
    display: table !important;
  }
  th#{$size},
  td#{$size} {
    display: table !important;
  }
  thead#{$size} {
    display: table-header-group !important;
  }
  b#{$size},
  strong#{$size},
  i#{$size},
  em#{$size},
  span#{$size},
  a#{$size} {
    display: inline;
  }
}

// Hide item
@mixin responsive-hidden($size) {
  #{$size} {
    display: none !important;
  }
}

// [converter] $parent hack
@mixin responsive-invisibility($parent) {
  #{$parent} {
    display: none !important;
  }
}

@media (max-width: $screen-xs-max) {
  @include responsive-invisibility('.hidden-xs');
}

@media (min-width: $screen-sm-min) and (max-width: $screen-sm-max) {
  @include responsive-invisibility('.hidden-sm');
}

@media (min-width: $screen-md-min) and (max-width: $screen-md-max) {
  @include responsive-invisibility('.hidden-md');
}

@media (min-width: $screen-lg-min) {
  @include responsive-invisibility('.hidden-lg');
}




// Grid system
//
// Generate semantic grid columns with these mixins.

// Centered container element
@mixin container-fixed($gutter: $grid-gutter-width) {
  margin-right: auto;
  margin-left: auto;
  padding-left:  floor(($gutter / 2));
  padding-right: ceil(($gutter / 2));
  @include clearfix;
}

// Creates a wrapper for a series of columns
@mixin make-row($gutter: $grid-gutter-width) {
  margin-left:  ceil(($gutter / -2));
  margin-right: floor(($gutter / -2));
  @include clearfix;
}

// Generate the extra small columns
@mixin make-xs-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  float: left;
  width: percentage(($columns / $grid-columns));
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);
}
@mixin make-xs-column-offset($columns) {
  margin-left: percentage(($columns / $grid-columns));
}
@mixin make-xs-column-push($columns) {
  left: percentage(($columns / $grid-columns));
}
@mixin make-xs-column-pull($columns) {
  right: percentage(($columns / $grid-columns));
}

// Generate the small columns
@mixin make-sm-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);

  @media (min-width: $screen-sm-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}
@mixin make-sm-column-offset($columns) {
  @media (min-width: $screen-sm-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}
@mixin make-sm-column-push($columns) {
  @media (min-width: $screen-sm-min) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-sm-column-pull($columns) {
  @media (min-width: $screen-sm-min) {
    right: percentage(($columns / $grid-columns));
  }
}

// Generate the medium columns
@mixin make-md-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);

  @media (min-width: $screen-md-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}
@mixin make-md-column-offset($columns) {
  @media (min-width: $screen-md-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}
@mixin make-md-column-push($columns) {
  @media (min-width: $screen-md-min) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-md-column-pull($columns) {
  @media (min-width: $screen-md-min) {
    right: percentage(($columns / $grid-columns));
  }
}

// Generate the large columns
@mixin make-lg-column($columns, $gutter: $grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);

  @media (min-width: $screen-lg-min) {
    float: left;
    width: percentage(($columns / $grid-columns));
  }
}
@mixin make-lg-column-offset($columns) {
  @media (min-width: $screen-lg-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}
@mixin make-lg-column-push($columns) {
  @media (min-width: $screen-lg-min) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-lg-column-pull($columns) {
  @media (min-width: $screen-lg-min) {
    right: percentage(($columns / $grid-columns));
  }
}


// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin make-grid-columns($i: 1, $list: ".grid__xs__#{$i}, .grid__sm__#{$i}, .grid__md__#{$i}, .grid__lg__#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .grid__xs__#{$i}, .grid__sm__#{$i}, .grid__md__#{$i}, .grid__lg__#{$i}";
  }
  #{$list} {
    box-sizing: border-box;
    position: relative;
    // Prevent columns from collapsing when empty
    min-height: 1px;
    // Inner gutter via padding
    padding-left:  ceil(($grid-gutter-width / 2));
    padding-right: floor(($grid-gutter-width / 2));
  }
}


// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin float-grid-columns($class, $i: 1, $list: ".grid__#{$class}__#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .grid__#{$class}__#{$i}";
  }
  #{$list} {
    float: left;
  }
}


@mixin calc-grid-column($index, $class, $type) {
  @if ($type == width) and ($index > 0) {
    .grid__#{$class}__#{$index} {
      width: percentage(($index / $grid-columns));
    }
  }
  @if ($type == push) and ($index > 0) {
    .grid__#{$class}__push__#{$index} {
      left: percentage(($index / $grid-columns));
    }
  }
  @if ($type == push) and ($index == 0) {
    .grid__#{$class}__push__0 {
      left: auto;
    }
  }
  @if ($type == pull) and ($index > 0) {
    .grid__#{$class}__pull__#{$index} {
      right: percentage(($index / $grid-columns));
    }
  }
  @if ($type == pull) and ($index == 0) {
    .grid__#{$class}__pull-0 {
      right: auto;
    }
  }
  @if ($type == offset) {
    .grid__#{$class}__offset__#{$index} {
      margin-left: percentage(($index / $grid-columns));
    }
  }
}

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin loop-grid-columns($columns, $class, $type) {
  @for $i from 0 through $columns {
    @include calc-grid-column($i, $class, $type);
  }
}


// Create grid for specific class
@mixin make-grid($class) {
  @include float-grid-columns($class);
  @include loop-grid-columns($grid-columns, $class, width);
  @include loop-grid-columns($grid-columns, $class, pull);
  @include loop-grid-columns($grid-columns, $class, push);
  @include loop-grid-columns($grid-columns, $class, offset);
}


// create a long shadow on using box-shadow css property
@mixin long-shadow($type, $color, $length, $fadeout: true, $xDirection: right, $yDirection: bottom, $modifier: 1) {
  $shadow: '';
  
  @if $fadeout == false {
    @if $xDirection == right {
      @if $yDirection == bottom {
        @for $i from 0 to $length - 1 {
          $yVal: $modifier * $i;
          $shadow: $shadow + $i + 'px ' + $yVal + 'px 0 ' + $color + ',';
        }
      } @else {
        @for $i from 0 to $length - 1 {
          $yVal: $modifier * $i;
          $shadow: $shadow + $i + 'px ' + $yVal * -1 + 'px 0 ' + $color + ',';
        }
      }
    }
    @if $xDirection == left {
      @if $yDirection == bottom {
        @for $i from 0 to $length - 1 {
          $xVal: $modifier * $i;
          $shadow: $shadow + $xVal * -1 + 'px ' + $i + 'px 0 ' + $color + ',';
        }
      } @else {
        @for $i from 0 to $length - 1 {
          $xVal: $modifier * $i;
          $shadow: $shadow + $xVal * -1 + 'px ' + $i * -1 + 'px 0 ' + $color + ',';
        }
      }
    }
  } @else {
    @for $i from 1 to $length - 1 {
      @if $xDirection == right {
        @if $yDirection == bottom {
          $yVal: $modifier * $i;
          $shadow: $shadow + $i + 'px ' + $yVal + 'px 0 ' +       rgba($color, 1 - $i / $length) + ',';
        } @else {
          $yVal: $modifier * $i;
          $shadow: $shadow + $i + 'px ' + $yVal * -1 + 'px 0 ' +       rgba($color, 1 - $i / $length) + ',';
        }
      }
      @if $xDirection == left {
        @if $yDirection == bottom {
          $xVal: $modifier * $i;
          $shadow: $shadow + $xVal * -1 + 'px ' + $i + 'px 0 ' +       rgba($color, 1 - $i / $length) + ',';
        } @else {
          $xVal: $modifier * $i;
          $shadow: $shadow + $xVal * -1 + 'px ' + $i * -1 + 'px 0 ' +       rgba($color, 1 - $i / $length) + ',';
        }
      }
    }
    $shadow: $shadow + $length + 'px ' + $length + 'px 0 ' + rgba($color, 0);
  }

  @if $fadeout == false {
    $shadow: $shadow + $length + 'px ' + $length + 'px 0 ' + rgba(0,0,0,0);
  }
  
  $shadow: unquote($shadow);
  @if $type == 'box' {box-shadow: $shadow;}
  @if $type == 'text' {text-shadow: $shadow;}
}